document.addEventListener("DOMContentLoaded", function() {

  for (var i = 0; i < codeArr.length; i++)
  {
    var newSpan = document.createElement('span');
    var newCodeContent = document.createTextNode(codeArr[i]);  
    var currentCode = document.getElementById("code-here");
    newSpan.appendChild(newCodeContent);
    currentCode.appendChild(newSpan); 
  }

  $(document).ready(function() {
    var spans = document.getElementsByTagName('span');
    var spansList = Array.prototype.slice.call(spans);
    var i = 0, howManyTimes = spansList.length;

    /* This stackoverflow link was CRUCIAL in getting my loop to
    actually remove the span elements with the appropriate delay
    because I had issues with setTimeout delaying different inside
    a for loop, AND issues with my variables not being seen inside
    the scope of the setTimeout callback function!!! Special thanks
    to users RamenChef for asking the question, Daniel Vassallo and 
    cji for giving awesome answers!! 
    https://stackoverflow.com/questions/3583724/how-do-i-add-a-delay-in-a-javascript-loop*/
    newDelay();
    function newDelay()
    {
      $(spansList[i]).delay( 150 ).fadeOut(600);
      i++;
      if (i < howManyTimes)
      {
        setTimeout(newDelay, 150);
      }
    }

  });

});

codeArr = [
    "#include <cs50.h>\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int n;\n", 
    "    do\n", 
    "    {\n", 
    "        printf(\"I demand that you give me a positive integer: \");\n", 
    "        n = GetInt();\n", 
    "    }\n", 
    "    while (n <= 0);\n", 
    "    printf(\"Thanks for the %i!\\n\", n);\n", 
    "\n", 
    "}\n", 
    "#include <stdio.h> \n", 
    "#include <stdbool.h>\n", 
    "\n", 
    "//*** This is the C code that I wrote for EDX HarvardX CS50!***//\n",
    "#define CAPACITY 4\n", 
    "typedef struct\n", 
    "{\n", 
    "    int head;\n", 
    "    int length;\n", 
    "    int elements[CAPACITY];\n", 
    "}\n", 
    "queue;\n", 
    "\n", 
    "bool isempty(queue * q);\n", 
    "bool dequeue(queue * q, int * element);\n", 
    "bool enqueue(queue * q, int element);\n", 
    "int length(queue * q);\n", 
    "\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "    int element;\n", 
    "    int * element1 = &element;\n", 
    "    queue  newq;\n", 
    "    queue * qptr = &newq;\n", 
    "    newq.head = 0;\n", 
    "    newq.length = 0;\n", 
    "    //newq.elements = {};\n", 
    "    \n", 
    "    printf(\"%i\\n\", isempty(qptr));\n", 
    "    for (i = 0; i < CAPACITY; i++)\n", 
    "    {\n", 
    "        enqueue(qptr, i + 2);\n", 
    "            \n", 
    "    }\n", 
    "    printf(\"%i\\n\", isempty(qptr));\n", 
    "    dequeue(qptr, element1);\n", 
    "    printf(\"%i\\n\", element);\n", 
    "    printf(\"%i\\n\", length(qptr));\n", 
    "    return 0;  \n", 
    "    \n", 
    "}\n", 
    "\n", 
    "bool dequeue(queue * q, int * element)\n", 
    "{\n", 
    "    if (q->length > 0)\n", 
    "    {\n", 
    "        *element = q->elements[q->head];\n", 
    "        q->head = (q->head + 1) % CAPACITY;\n", 
    "        q->length--;\n", 
    "        printf(\"dequeue(): %d\\n\", *element);\n", 
    "        return true;\n", 
    "    }\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "\n", 
    "bool enqueue(queue * q, int element)\n", 
    "{\n", 
    "    if (q->length < CAPACITY)\n", 
    "    {\n", 
    "        q->elements[(q->head + q->length) % CAPACITY] = element;\n", 
    "        q->length++;\n", 
    "        printf(\"enqueue(): %d\\n\", element);\n", 
    "        return true;\n", 
    "    }\n", 
    "\n", 
    "    return false;\n", 
    "}\n", 
    "\n", 
    "bool isempty(queue * q)\n", 
    "{\n", 
    "    return q->length == 0;\n", 
    "}\n", 
    "\n", 
    "int length(queue * q)\n", 
    "{\n", 
    "    return q->length;\n", 
    "}\n", 
    "//testing selection sort\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <time.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i, g, temp, ctr, smallest;\n", 
    "    time_t t;\n", 
    "\n", 
    "    srand(time(&t)); //Seeds rand with system time\n", 
    "\n", 
    "    int array[10];\n", 
    "\n", 
    "    //fills array with 10 random numbers\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        array[i] = (rand() % 99) + 1;\n", 
    "\n", 
    "    //prints array\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");   \n", 
    "\n", 
    "    //sorting algorithm is here\n", 
    "    for (ctr = 0; ctr < 10; ctr++)\n", 
    "    {\n", 
    "        smallest = array[ctr];\n", 
    "\n", 
    "        for (i = ctr; i < 10; i++)\n", 
    "        {\n", 
    "            if (array[i] < smallest)\n", 
    "            {\n", 
    "                smallest = array[i];\n", 
    "                j = i;\n", 
    "            }\n", 
    "        }\n", 
    "        temp = array[ctr];\n", 
    "        array[ctr] = smallest;\n", 
    "        array[j] = temp;\n", 
    "    }\n", 
    "\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int *p, *q;\n", 
    "\n", 
    "    p = malloc(sizeof(int));\n", 
    "    q = p;\n", 
    "    *p = 10;\n", 
    "    printf(\"%d %d\\n\", *q, *p);\n", 
    "    *q = 20;\n", 
    "    printf(\"%d %d\\n\", *q, *p);\n", 
    "    *p = 35;\n", 
    "    printf(\"%d %d\\n\", *q, *p);\n", 
    "    return 0; \n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int fact(int n);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    printf(\"%i\\n\", fact(5));\n", 
    "}\n", 
    "\n", 
    "int fact(int n)\n", 
    "{\n", 
    "    int result = 0;\n", 
    "\n", 
    "    if (n <= 1)\n", 
    "    {\n", 
    "        return 1;\n", 
    "    }\n", 
    "\n", 
    "    return n += fact(n - 1);\n", 
    "\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "\n", 
    "    FILE * fptr;\n", 
    "    fptr = fopen(\"lucent.txt\", \"w\");\n", 
    "    if (!fptr)\n", 
    "        return 1;\n", 
    "\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "    {\n", 
    "        fprintf(fptr, \"There is number %d\\n\", i + 1);\n", 
    "    }\n", 
    "\n", 
    "    fprintf(fptr, \"That is all the numbers for today\\n\");\n", 
    "\n", 
    "    fclose(fptr);\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    char * s = malloc(10 * sizeof(char));\n", 
    "    //char s[10];\n", 
    "    printf(\"String please: \");\n", 
    "    fgets(s, 40, stdin);\n", 
    "    printf(\"Thanks for the %s\", s);\n", 
    "    free(s);\n", 
    "}\n", 
    "/* Program sorts word by alpha using a hash function, then inserts\n", 
    "them into hash table using a separate function, THIS VERSION USES \n", 
    "AN ARRAY OF LINKED LISTS INSTEAD OF ARRAY OF STRING POINTERS */\n", 
    "#include <stdio.h>\n", 
    "#include <ctype.h>\n", 
    "#include <string.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "#define SIZE 26\n", 
    "\n", 
    "typedef struct node\n", 
    "{\n", 
    "    char * string;\n", 
    "    struct node * next;\n", 
    "}node;\n", 
    "\n", 
    "\n", 
    "\n", 
    "//returns an index for inputting into hash table\n", 
    "int hash_func(char * key);\n", 
    "\n", 
    "/* use hash_func(). Gets a string from user, allocates memory, \n", 
    "and insert into the hash table using linked lists*/\n", 
    "void insertIntoTable(node * array[]);\n", 
    "\n", 
    "/* Traverses through to print all elements including\n", 
    "the linked nested ones */\n", 
    "void traverse(node * array[]);\n", 
    "\n", 
    "/* I had trouble with this one...frees the whole chain */\n", 
    "void freeChain(node * array[]);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int ctr;\n", 
    "\n", 
    "   \n", 
    "    // set up actual hash table, array of pointers to struct node type \n", 
    "    node * hashArray[SIZE] = {NULL,};\n", 
    "    \n", 
    "\n", 
    "    // loop through however many entries required\n", 
    "    for (ctr = 0; ctr < 10; ctr++)\n", 
    "    {\n", 
    "        insertIntoTable(hashArray);\n", 
    "    }\n", 
    "\n", 
    "    traverse(hashArray);\n", 
    "\n", 
    "    freeChain(hashArray);\n", 
    "\n", 
    "\n", 
    "\n", 
    "    return 0;\n", 
    "\n", 
    "\n", 
    "}\n", 
    "\n", 
    "int hash_func(char * key)\n", 
    "{\n", 
    "    /* This turns first letter of item to be put into\n", 
    "table into basically an index number of an array by\n", 
    "capitializing it and then subtracting in from 'A' which is \n", 
    "really an integer that corresponds to that letter on the\n", 
    "ascii table. This subtraction gives us where to insert in\n", 
    "the array! */\n", 
    "    int hash = toupper(key[0]) - 'A';\n", 
    "\n", 
    "    return hash % SIZE; \n", 
    "}\n", 
    "\n", 
    "\n", 
    "void insertIntoTable(node * array[])\n", 
    "{\n", 
    "    // allow 40 characters for words to be stored\n", 
    "    char key[40];\n", 
    "\n", 
    "    // retrieves and stores string from user\n", 
    "    printf(\"Submit string to be entered into table: \");\n", 
    "    fgets(key, 39, stdin);\n", 
    "\n", 
    "    // creates appropriate index from hash_func\n", 
    "    int index = hash_func(key);\n", 
    "\n", 
    "    /* allocates appropriate memory and copies string into correct index\n", 
    "       and the while loop just bumps down the index if correct spot is\n", 
    "       take */\n", 
    "    if (array[index] != NULL)\n", 
    "    {\n", 
    "\n", 
    "        // allocate memory for new node\n", 
    "        node * newnode = malloc(sizeof(node));\n", 
    "\n", 
    "        //initialize new node properly\n", 
    "        newnode->next = NULL;\n", 
    "        newnode->string = malloc(sizeof(key));\n", 
    "\n", 
    "        //copy user supplied value into new node's string\n", 
    "        strncpy(newnode->string, key, 39);\n", 
    "\n", 
    "        /* update pointers: newnode's next pointer must now\n", 
    "           point to what was previously the first node, so\n", 
    "           make it have the value of the original index head\n", 
    "           pointer. */\n", 
    "        newnode->next = array[index];\n", 
    "\n", 
    "        /* The original index head pointer must now point to\n", 
    "           the new node since we are prepending new entries */\n", 
    "        array[index] = newnode;\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        // allocate memory for new node\n", 
    "        node * newnode = malloc(sizeof(node));\n", 
    "\n", 
    "        // properly initialize new node\n", 
    "        newnode->next = NULL;\n", 
    "        newnode->string = malloc(sizeof(key));\n", 
    "\n", 
    "        /* since this is the first node we simply have to\n", 
    "           make the original index head point to our \n", 
    "           new node */\n", 
    "        strncpy(newnode->string, key, 39);\n", 
    "        array[index] = newnode;\n", 
    "        \n", 
    "    }\n", 
    "\n", 
    "    return;\n", 
    "}\n", 
    "\n", 
    "void traverse(node * array[])\n", 
    "{\n", 
    "    int ctr;\n", 
    "    /* Very important! I kept trying to make a temp pointer\n", 
    "to store current pointer by making temp pointer THAT WOULD POINT TO \n", 
    "THE WHOLE ARRAY! I needed to make a simple node * pointer and assign\n", 
    "into that the contents of ONLY ONE INDEX!! */\n", 
    "    node * temp;\n", 
    "\n", 
    "    // loops through and prints contents of hash table\n", 
    "    for (ctr = 0; ctr < SIZE; ctr++)\n", 
    "    {\n", 
    "        temp = array[ctr];\n", 
    "        while (temp != NULL)\n", 
    "        {\n", 
    "            printf(\"%s\\n\", temp->string);\n", 
    "            temp = temp->next;\n", 
    "               \n", 
    "        }\n", 
    "    } \n", 
    "\n", 
    "\n", 
    "    return;\n", 
    "\n", 
    "}\n", 
    "\n", 
    "void freeChain(node * array[])\n", 
    "{\n", 
    "    int ctr;\n", 
    "    node * temp; \n", 
    "    node * test;\n", 
    " \n", 
    "    /* loops through and frees the memory allocated before program exit */\n", 
    "    for (ctr = 0; ctr < SIZE; ctr++)\n", 
    "    {\n", 
    "        temp = array[ctr];\n", 
    "\n", 
    "        while (temp != NULL)\n", 
    "        {    \n", 
    "            test = temp;\n", 
    "            temp = temp->next;\n", 
    "            free(test->string);\n", 
    "            free(test);\n", 
    "        }\n", 
    "    }  \n", 
    "\n", 
    "    return;\n", 
    "\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    FILE *f;\n", 
    "    char s[1000];\n", 
    "\n", 
    "    f = fopen(\"lucent.txt\", \"r\");\n", 
    "\n", 
    "    if (!f)\n", 
    "        return 1;\n", 
    "\n", 
    "    while (fgets(s, 1000, f) != NULL)\n", 
    "        printf(\"%s\", s);\n", 
    "    fclose(f);\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <time.h>\n", 
    "\n", 
    "#define MAX 10\n", 
    "\n", 
    "int a[MAX];\n", 
    "int rand_seed = 255255;\n", 
    "\n", 
    "/* from K&R - returns random number between 0 and 32767.*/\n", 
    "int rand()\n", 
    "{\n", 
    "    rand_seed = rand_seed * 1103515245 + 12345;\n", 
    "    return (unsigned int) (rand_seed / 65536) % 32768;\n", 
    "}\n", 
    "\n", 
    "void bubble_sort()\n", 
    "{\n", 
    "    int x, y, t;\n", 
    "    for (x = 0; x < MAX - 1; x++)\n", 
    "        for (y = 0; y < MAX-x-1; y++)\n", 
    "            if (a[y] > a[y + 1])\n", 
    "            {\n", 
    "                t = a[y];\n", 
    "                a[y] = a[y + 1];\n", 
    "                a[y + 1] = t;\n", 
    "            }\n", 
    "}\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "    /* fill array */\n", 
    "    for (i = 0; i < MAX; a[i] = rand(),printf(\"%d\\n\", a[i]), i++);\n", 
    "    /*{\n", 
    "        a[i] = rand();\n", 
    "        printf(\"%d\\n\", a[i]);\n", 
    "    }*/\n", 
    "    \n", 
    "    /* bubble sort the array*/\n", 
    "\n", 
    "    /* print sorted array */\n", 
    "    printf(\"--------------------\\n\");\n", 
    "    bubble_sort();\n", 
    "    for (i = 0; i < MAX; i++)\n", 
    "        {\n", 
    "            printf(\"%d\\n\", a[i]);\n", 
    "        }\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    //factorials aren't defined for the negative integers\n", 
    "    int num, i;\n", 
    "\n", 
    "    do\n", 
    "    {\n", 
    "        printf(\"Enter a positive integer: \");\n", 
    "        scanf(\"%i\", &num);\n", 
    "    }\n", 
    "    while (num < 0);\n", 
    "\n", 
    "    int factorial = 1;\n", 
    "    for (i = 1; i <= num; i++)\n", 
    "        factorial = factorial * i;\n", 
    "\n", 
    "    printf(\"%d! = %d\\n\", num, factorial);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "//testing insertion sort\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <time.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i, g, j, temp, n, smallest;\n", 
    "    time_t t;\n", 
    "\n", 
    "    srand(time(&t)); //Seeds rand with system time\n", 
    "\n", 
    "    int array[10];\n", 
    "\n", 
    "    //fills array with 10 random numbers\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        array[i] = (rand() % 99) + 1;\n", 
    "\n", 
    "    //prints array\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");   \n", 
    "\n", 
    "    //sorting algorithm is here\n", 
    "    for (i = 1; i < 10; i++)\n", 
    "    {\n", 
    "        j = i;\n", 
    "        while (j > 0 && array[j-1] > array[j])\n", 
    "        {\n", 
    "            temp = array[j];\n", 
    "            array[j] = array[j - 1];\n", 
    "            array[j - 1] = temp;\n", 
    "            j -= 1;\n", 
    "        }\n", 
    "    } \n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i, j, didSwap, temp;\n", 
    "    int array[6] = {1, 3, 2, 4, 5, 6};\n", 
    "\n", 
    "    /*for (i = 0; i < 10; i++)\n", 
    "        array[i] = (rand() % 99) + 1;*/\n", 
    "\n", 
    "    for (i = 0; i < 6; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    for (i = 0; i < 5; i++)\n", 
    "    {\n", 
    "        didSwap = 0;\n", 
    "        for (j = i; j < 6; j++)\n", 
    "        {\n", 
    "            if (array[j] < array[i])\n", 
    "            {\n", 
    "                temp = array[j];\n", 
    "                array[j] = array[i];\n", 
    "                array[i] = temp;\n", 
    "                didSwap = 1;\n", 
    "            } \n", 
    "        }\n", 
    "        if (didSwap == 0)\n", 
    "            break;\n", 
    "    } \n", 
    "\n", 
    "    for (i = 0; i < 6; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    return 0;\n", 
    "\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int ctr;\n", 
    "    int * iPtr;\n", 
    "    iPtr = malloc(100 * sizeof(int));\n", 
    "\n", 
    "    if (!iPtr)\n", 
    "    {\n", 
    "        printf(\"Memory alloc did not work!\\n\");\n", 
    "        return 1;\n", 
    "    }\n", 
    "\n", 
    "    float * fPtr;\n", 
    "    fPtr = malloc(50 * sizeof(float));\n", 
    "\n", 
    "    if (!fPtr)\n", 
    "    {\n", 
    "        printf(\"Memory alloc did not work!\\n\");\n", 
    "        return 1;\n", 
    "    }\n", 
    "\n", 
    "    double * dPtr;\n", 
    "    dPtr = malloc(450 * sizeof(double));\n", 
    "\n", 
    "    if (!dPtr)\n", 
    "    {\n", 
    "        printf(\"Memory alloc did not work!\\n\");\n", 
    "        return 1;\n", 
    "    }\n", 
    "\n", 
    "\n", 
    "    for (ctr = 0; ctr < 100; ctr++)\n", 
    "        iPtr[ctr] = ctr;\n", 
    "\n", 
    "    for (ctr = 0; ctr < 50; ctr++)\n", 
    "        fPtr[ctr] = ctr;\n", 
    "    \n", 
    "    for (ctr = 0; ctr < 450; ctr++)\n", 
    "        dPtr[ctr] = ctr;\n", 
    "\n", 
    "    free(iPtr);\n", 
    "    free(fPtr);\n", 
    "    free(dPtr);\n", 
    "\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    FILE *fp;\n", 
    "    int chara;\n", 
    "\n", 
    "    fp = fopen(\"testfile.txt\", \"a\");\n", 
    "    //fprintf(fp, \"I am appending this\\n\");\n", 
    "\n", 
    "    /*while ((chara = fgetc(fp)) != EOF)\n", 
    "    {\n", 
    "        printf(\"%c\\n\", chara); \n", 
    "    }*/\n", 
    "\n", 
    "    fputc(0xA, fp);\n", 
    "\n", 
    "    \n", 
    "\n", 
    "    fclose(fp);\n", 
    "    printf(\"Hello\\n\");\n", 
    "\n", 
    "    printf(\"%x %x\\n\", 1234,556666);\n", 
    "    printf(\"%c %c %c %c\\n\", 125, 126, 127, 2008);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    printf(\"%c\\n\", 140);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "//Set up a linked list and search in it\n", 
    "#include <stdio.h>\n", 
    "#include <stdbool.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "typedef struct node\n", 
    "{\n", 
    "    int n;\n", 
    "    struct node * next;\n", 
    "}\n", 
    "node;\n", 
    "\n", 
    "bool search(node * list, int n);\n", 
    "void insert(node * list, int n);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    //node node1;\n", 
    "    //node1.n = 6;\n", 
    "    //node1.next = NULL;\n", 
    "    node * list = malloc(sizeof(node));\n", 
    "    list->n = 6;\n", 
    "    list->next = NULL;\n", 
    "\n", 
    "    if (search(list, 6))\n", 
    "        printf(\"found it\\n\");\n", 
    "    else\n", 
    "        printf(\"Not here sir\\n\");\n", 
    "\n", 
    "    insert(list, 3);\n", 
    "\n", 
    "    if (search(list, 3))\n", 
    "        printf(\"found it\\n\");\n", 
    "    else\n", 
    "        printf(\"Not here sir\\n\");\n", 
    "\n", 
    "    //printf(\"%i\\n\", new->n);\n", 
    "\n", 
    "    return 0;\n", 
    "    \n", 
    "}\n", 
    "\n", 
    "bool search(node * list, int n)\n", 
    "{\n", 
    "    node * ptr = list;\n", 
    "\n", 
    "    while (ptr != NULL)\n", 
    "    {\n", 
    "        if (ptr->n == n)\n", 
    "        {\n", 
    "            return true;\n", 
    "        }\n", 
    "        ptr = ptr->next;\n", 
    "    } \n", 
    "    return false;\n", 
    "}\n", 
    "\n", 
    "void insert(node * list, int n)\n", 
    "{\n", 
    "    // create new node!!\n", 
    "    node * new = malloc(sizeof(node));\n", 
    "\n", 
    "    // check for NULL whenever you malloc?\n", 
    "    if (new == NULL)\n", 
    "    {\n", 
    "        exit(1);\n", 
    "    }\n", 
    "\n", 
    "    // initialize new node\n", 
    "    new->n = n;\n", 
    "    new->next = NULL;\n", 
    "\n", 
    "    // insert new node at head\n", 
    "    new->next = list;\n", 
    "    list  = new;  \n", 
    "\n", 
    "    return;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int x;\n", 
    "    printf(\"Number please: \");\n", 
    "    scanf(\"%i\", &x);\n", 
    "    printf(\"Thanks for the %i\\n\", x);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "#include<stdio.h>\n", 
    "#include <string.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <stdbool.h>\n", 
    "\n", 
    "char * removeLeadBlanks(char * str);\n", 
    "char * removeTrailBlanks(char * str);\n", 
    "char * returnLast(char * str);\n", 
    "char * upper(char * str);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "    char *p = malloc(sizeof(char) * 100);\n", 
    "\n", 
    "    fgets(p, 100, stdin);\n", 
    "    int n = strlen(p);\n", 
    "\n", 
    "    *(p + (n - 1)) = '\\0';\n", 
    "\n", 
    "    p = removeLeadBlanks(p);\n", 
    "    printf(\"%s\\n\", p);\n", 
    "    p = removeTrailBlanks(p);\n", 
    "    printf(\"%s\\n\", p);\n", 
    "\n", 
    "    printf(\"%s\\n\", returnLast(p));\n", 
    "\n", 
    "    printf(\"%s\\n\", upper(p));\n", 
    "\n", 
    "    free(p);  \n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "\n", 
    "char * removeLeadBlanks(char * str)\n", 
    "{\n", 
    "    while (*str == ' ')\n", 
    "        str++;\n", 
    "\n", 
    "    return str;\n", 
    "}\n", 
    "\n", 
    "char * removeTrailBlanks(char * str)\n", 
    "{\n", 
    "    int i;\n", 
    "    int j = strlen(str);\n", 
    "\n", 
    "    for (i = j - 1; i >= 0; i--)\n", 
    "    {\n", 
    "        if (str[i] == ' ')\n", 
    "        {\n", 
    "            str[i] = '\\0';\n", 
    "        }\n", 
    "        if (str[i - 1] != ' ')\n", 
    "        {\n", 
    "            break;\n", 
    "        }\n", 
    "    }\n", 
    "\n", 
    "    return str;\n", 
    "}\n", 
    "\n", 
    "char * returnLast(char * str)\n", 
    "{\n", 
    "    while (*str != ' ')\n", 
    "    {\n", 
    "        str++;\n", 
    "    }\n", 
    "    \n", 
    "    str++;\n", 
    "\n", 
    "    return str;\n", 
    "\n", 
    "}\n", 
    "\n", 
    "char * upper(char * str)\n", 
    "{\n", 
    "    int i;\n", 
    "    int n = strlen(str);\n", 
    "\n", 
    "    for (i = 0; i < n; i++)\n", 
    "    {\n", 
    "        if (str[i] >= 97)\n", 
    "            str[i] -= 32;\n", 
    "    }\n", 
    "    return str;\n", 
    "}\n", 
    "//testing selection sort\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <time.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i, g, j, temp, ctr, smallest;\n", 
    "    time_t t;\n", 
    "\n", 
    "    srand(time(&t)); //Seeds rand with system time\n", 
    "\n", 
    "    int array[10];\n", 
    "\n", 
    "    //fills array with 10 random numbers\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        array[i] = (rand() % 99) + 1;\n", 
    "\n", 
    "    //prints array\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");   \n", 
    "\n", 
    "    //sorting algorithm is here\n", 
    "    for (ctr = 0; ctr < 10; ctr++)\n", 
    "    {\n", 
    "        smallest = array[ctr];\n", 
    "\n", 
    "        for (i = ctr; i < 10; i++)\n", 
    "        {\n", 
    "            if (array[i] < smallest)\n", 
    "            {\n", 
    "                smallest = array[i];\n", 
    "                j = i;\n", 
    "            }\n", 
    "        }\n", 
    "        temp = array[ctr];\n", 
    "        array[ctr] = smallest;\n", 
    "        array[j] = temp;\n", 
    "    }\n", 
    "\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "/* programs a queue and has functions for enqueue, dequeue, isempty and \n", 
    "length */\n", 
    "#include <stdio.h> \n", 
    "#include <stdbool.h>\n", 
    "\n", 
    "#define CAPACITY 4\n", 
    "typedef struct\n", 
    "{\n", 
    "    int head;\n", 
    "    int length;\n", 
    "    int elements[CAPACITY];\n", 
    "}\n", 
    "queue;\n", 
    "\n", 
    "bool isempty(queue * q);\n", 
    "bool dequeue(queue * q, int * element);\n", 
    "bool enqueue(queue * q, int element);\n", 
    "int length(queue * q);\n", 
    "\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "    int element;\n", 
    "    int * element1 = &element;\n", 
    "    queue  newq;\n", 
    "    queue * qptr = &newq;\n", 
    "    newq.head = 0;\n", 
    "    newq.length = 0;\n", 
    "    //newq.elements = {};\n", 
    "    \n", 
    "    printf(\"%i\\n\", isempty(qptr));\n", 
    "    for (i = 0; i < CAPACITY; i++)\n", 
    "    {\n", 
    "        enqueue(qptr, i + 2);\n", 
    "            \n", 
    "    }\n", 
    "    printf(\"%i\\n\", isempty(qptr));\n", 
    "    dequeue(qptr, element1);\n", 
    "    printf(\"%i\\n\", element);\n", 
    "    printf(\"%i\\n\", length(qptr));\n", 
    "    return 0;  \n", 
    "    \n", 
    "}\n", 
    "\n", 
    "bool dequeue(queue * q, int * element)\n", 
    "{\n", 
    "    if (q->length > 0)\n", 
    "    {\n", 
    "        *element = q->elements[q->head];\n", 
    "        q->head = (q->head + 1) % CAPACITY;\n", 
    "        q->length--;\n", 
    "        printf(\"dequeue(): %d\\n\", *element);\n", 
    "        return true;\n", 
    "    }\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "\n", 
    "bool enqueue(queue * q, int element)\n", 
    "{\n", 
    "    if (q->length < CAPACITY)\n", 
    "    {\n", 
    "        q->elements[(q->head + q->length) % CAPACITY] = element;\n", 
    "        q->length++;\n", 
    "        printf(\"enqueue(): %d\\n\", element);\n", 
    "        return true;\n", 
    "    }\n", 
    "\n", 
    "    return false;\n", 
    "}\n", 
    "\n", 
    "bool isempty(queue * q)\n", 
    "{\n", 
    "    return q->length == 0;\n", 
    "}\n", 
    "\n", 
    "int length(queue * q)\n", 
    "{\n", 
    "    return q->length;\n", 
    "}\n", 
    "/* programs a stack and has functions for push, pop, isempty and \n", 
    "length */\n", 
    "#include <stdio.h> \n", 
    "#include <stdbool.h>\n", 
    "\n", 
    "#define CAPACITY 4\n", 
    "typedef struct\n", 
    "{\n", 
    "    int head;\n", 
    "    int length;\n", 
    "    int elements[CAPACITY];\n", 
    "}\n", 
    "stack;\n", 
    "\n", 
    "bool isempty(stack * s);\n", 
    "bool pop(stack * s, int * element);\n", 
    "bool push(stack * s, int element);\n", 
    "int length(stack * s);\n", 
    "void traverse(stack * s);\n", 
    "\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "    int element;\n", 
    "    int * element1 = &element;\n", 
    "    stack newStack;\n", 
    "    stack * sptr = &newStack;\n", 
    "    sptr->head = 0;\n", 
    "    sptr->length = 0;\n", 
    "    //newq.elements = {};\n", 
    "    \n", 
    "    printf(\"%i\\n\", isempty(sptr));\n", 
    "    for (i = 0; i < CAPACITY; i++)\n", 
    "    {\n", 
    "        push(sptr, i + 2);\n", 
    "            \n", 
    "    }\n", 
    "\n", 
    "    traverse(sptr);\n", 
    "\n", 
    "    if (isempty(sptr))\n", 
    "        printf(\"Tis empty\\n\");\n", 
    "    else\n", 
    "        printf(\"Tis non-empty\\n\");\n", 
    "    pop(sptr, element1);\n", 
    "    //printf(\"You popped out %i\\n\", element);\n", 
    "\n", 
    "    traverse(sptr);\n", 
    "\n", 
    "    push(sptr, 6);\n", 
    "\n", 
    "    traverse(sptr);\n", 
    "\n", 
    "    pop(sptr, element1);\n", 
    "\n", 
    "    traverse(sptr);\n", 
    "\n", 
    "    pop(sptr, element1);\n", 
    "    //printf(\"You popped out %i\\n\", element);\n", 
    "\n", 
    "    traverse(sptr);\n", 
    "    printf(\"%i\\n\", length(sptr));\n", 
    "    if (isempty(sptr))\n", 
    "        printf(\"Tis empty\\n\");\n", 
    "    else\n", 
    "        printf(\"Tis non-empty\\n\");\n", 
    "\n", 
    "    pop(sptr, element1);\n", 
    "    pop(sptr, element1);\n", 
    "    if (isempty(sptr))\n", 
    "        printf(\"Tis empty\\n\");\n", 
    "    else\n", 
    "        printf(\"Tis non-empty\\n\");\n", 
    "\n", 
    "\n", 
    "    return 0;  \n", 
    "    \n", 
    "}\n", 
    "\n", 
    "bool pop(stack * s, int * element)\n", 
    "{\n", 
    "    if (s->length > 0)\n", 
    "    {\n", 
    "        *element = s->elements[s->head];\n", 
    "        s->length--;\n", 
    "        s->head = s->length - 1;\n", 
    "        printf(\"pop(): %d\\n\", *element);\n", 
    "        return true;\n", 
    "    }\n", 
    "\n", 
    "    return false;\n", 
    "}\n", 
    "\n", 
    "bool push(stack * s, int element)\n", 
    "{\n", 
    "    if (s->length < CAPACITY)\n", 
    "    {\n", 
    "        s->elements[(s->length) % CAPACITY] = element;\n", 
    "        s->head = s->length;\n", 
    "        s->length++;\n", 
    "        printf(\"push(): %d\\n\", element);\n", 
    "        return true;\n", 
    "    }\n", 
    "\n", 
    "    return false;\n", 
    "}\n", 
    "\n", 
    "bool isempty(stack * s)\n", 
    "{\n", 
    "    return s->length == 0;\n", 
    "}\n", 
    "\n", 
    "int length(stack * s)\n", 
    "{\n", 
    "    return s->length;\n", 
    "}\n", 
    "\n", 
    "void traverse(stack * s)\n", 
    "{\n", 
    "    int i, n;\n", 
    "    for (i = 0, n = s->length; i < n; i++)\n", 
    "    {\n", 
    "        printf(\"%i \", s->elements[(i + s->head) % s->length]); \n", 
    "    } \n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    return;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int *p, *q;\n", 
    "\n", 
    "    p = malloc(sizeof(int));\n", 
    "    q = malloc(sizeof(int));\n", 
    "\n", 
    "    *p = 10;\n", 
    "    *q = 20;\n", 
    "    printf(\"%d %d\\n\", *p, *q);\n", 
    "    *p = *q;\n", 
    "    printf(\"%d %d\\n\", *p, *q);\n", 
    "    free(p); free(q);\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "\n", 
    "int main(int argc, char *argv[])\n", 
    "{\n", 
    "    int x;\n", 
    "\n", 
    "    printf(\"%d\\n\", argc);\n", 
    "    for (x = 0; x < argc; x++)\n", 
    "        printf(\"%s\\n\", argv[x]);\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "void hello(int n);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "\n", 
    "    hello(5);\n", 
    "\n", 
    "}\n", 
    "\n", 
    "void hello(int n)\n", 
    "{\n", 
    "    if (n <= 0)\n", 
    "    {\n", 
    "        printf(\"Bye!\\n\");\n", 
    "        return;\n", 
    "    }\n", 
    "\n", 
    "    printf(\"Hello!\\n\");\n", 
    "    hello(n - 1);\n", 
    "    \n", 
    "}\n", 
    "\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    char * ptr1, * ptr2, * ptr3;\n", 
    "\n", 
    "    ptr1 = \"Hello\";\n", 
    "\n", 
    "    ptr2 = ptr1;\n", 
    "\n", 
    "\n", 
    "    ptr3 = ptr1;\n", 
    "\n", 
    "    printf(\"ptr1:%s\\nptr2:%s\\nptr3:%s\\n\", ptr1, ptr2, ptr3);\n", 
    "\n", 
    "    ptr3 = \"New String\";\n", 
    "\n", 
    "    printf(\"ptr1:%s\\nptr2:%s\\nptr3:%s\\n\", ptr1, ptr2, ptr3);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <string.h>\n", 
    "\n", 
    "typedef struct\n", 
    "{\n", 
    "    char name[21];\n", 
    "    char city[21];\n", 
    "    char phone[21];\n", 
    "    char * comment;\n", 
    "}Addr;\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    Addr * s = malloc(sizeof(Addr));\n", 
    "    char comm[100];\n", 
    "    fgets(s->name, 20, stdin);\n", 
    "    fgets(s->city, 20, stdin);\n", 
    "    fgets(s->phone, 20, stdin);\n", 
    "    fgets(comm, 20, stdin);\n", 
    "\n", 
    "    s->comment = malloc(sizeof(char[strlen(comm) + 1]));\n", 
    "    strncpy(s->comment, comm, (sizeof(char) * strlen(comm)));\n", 
    "    printf(\"%s\\n\", s->comment);    \n", 
    "   \n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <string.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    char s[1000];\n", 
    "    int count = 0;\n", 
    "\n", 
    "    while (fgets(s, 10, stdin))\n", 
    "    {\n", 
    "        count ++;\n", 
    "    }\n", 
    "\n", 
    "    printf(\"%d\\n\", count);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(int argc, char *argv[])\n", 
    "{\n", 
    "    int x;\n", 
    "\n", 
    "    printf(\"%d\\n\", argc);\n", 
    "\n", 
    "    for (x = 0; x < argc; x++)\n", 
    "        printf(\"%s\\n\", argv[x]);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "/* This has it all -- linked lists, plus traversing them, prepending\n", 
    "to them, appending to them, inserting into them in order,\n", 
    "and searching them for a value! */\n", 
    "\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <stdbool.h>\n", 
    "\n", 
    "struct entry\n", 
    "{\n", 
    "    int value;\n", 
    "    struct entry * next;\n", 
    "};\n", 
    "\n", 
    "// some needed to return the list pointer\n", 
    "struct  entry * prepend(struct entry * listPtr, int n);\n", 
    "void append(struct entry * listPtr, int n);\n", 
    "void traverse(struct entry * listPtr);\n", 
    "struct entry * insertSorted(struct entry * listPtr, int n);\n", 
    "bool search(struct entry * listPtr,  int n);\n", 
    "\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    struct entry n1, n2, n3;\n", 
    "    struct entry * listPtr = &n1;\n", 
    "\n", 
    "    n1.value = 100;\n", 
    "    n1.next = &n2;\n", 
    "\n", 
    "    n2.value = 200;\n", 
    "    n2.next = &n3;\n", 
    "    \n", 
    "    n3.value = 300;\n", 
    "    n3.next = NULL;\n", 
    "\n", 
    "    traverse(listPtr);\n", 
    "\n", 
    "    //listPtr = prepend(listPtr, 13);\n", 
    "    //traverse(listPtr);\n", 
    "\n", 
    "    //listPtr = prepend(listPtr, 763);\n", 
    "    //traverse(listPtr);\n", 
    "\n", 
    "    //append(listPtr, 443);\n", 
    "    //traverse(listPtr);\n", 
    "\n", 
    "    listPtr = insertSorted(listPtr, 107);\n", 
    "    traverse(listPtr);\n", 
    "    listPtr = insertSorted(listPtr, 207);\n", 
    "    traverse(listPtr);\n", 
    "    listPtr = insertSorted(listPtr, 1);\n", 
    "    traverse(listPtr);\n", 
    "    listPtr = insertSorted(listPtr, 10000);\n", 
    "    traverse(listPtr);\n", 
    "\n", 
    "    if (search(listPtr, 207))\n", 
    "    {\n", 
    "        printf(\"Found it!\\n\");\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        printf(\"Not here!\\n\");\n", 
    "    }\n", 
    "    return 0;\n", 
    "\n", 
    "}\n", 
    "\n", 
    "struct entry * prepend(struct entry * listPtr, int n)\n", 
    "{\n", 
    "    struct entry * newPtr = listPtr; \n", 
    "    struct entry * n0_5 = malloc(sizeof(struct entry));\n", 
    " \n", 
    "    n0_5->value = n;\n", 
    "    n0_5->next = NULL;\n", 
    "    n0_5->next = newPtr;\n", 
    "    newPtr = n0_5; \n", 
    "\n", 
    "    return newPtr;\n", 
    "    \n", 
    "}\n", 
    "\n", 
    "void append(struct entry * listPtr, int n)\n", 
    "{\n", 
    "    struct entry * newPtr = listPtr; \n", 
    "    struct entry * last = malloc(sizeof(struct entry));\n", 
    " \n", 
    "    last->value = n;\n", 
    "    last->next = NULL;\n", 
    "\n", 
    "    while (newPtr->next != NULL)\n", 
    "    {\n", 
    "        newPtr = newPtr->next;\n", 
    "    }\n", 
    "    newPtr->next = last; \n", 
    "\n", 
    "    return;\n", 
    "    \n", 
    "}\n", 
    "\n", 
    "struct entry * insertSorted(struct entry * listPtr, int n)\n", 
    "{\n", 
    "    struct entry * newPtr = listPtr;\n", 
    "    if (newPtr->value > n)\n", 
    "    {\n", 
    "        newPtr = prepend(listPtr, n);\n", 
    "        return newPtr; \n", 
    "    }\n", 
    "\n", 
    "    struct entry * sorted = malloc(sizeof(struct entry));\n", 
    "    sorted->value = n;\n", 
    "    sorted->next = NULL;\n", 
    "\n", 
    "    while (newPtr != NULL)\n", 
    "    {\n", 
    "        if (newPtr->next == NULL) \n", 
    "        {\n", 
    "            append(listPtr, n);\n", 
    "            return listPtr;\n", 
    "\n", 
    "        }\n", 
    "        else if (newPtr->next->value > n) \n", 
    "        {\n", 
    "            sorted->next = newPtr->next;\n", 
    "            newPtr->next = sorted;\n", 
    "            return listPtr;\n", 
    "        }\n", 
    "        newPtr = newPtr->next;\n", 
    "    } \n", 
    "\n", 
    "}\n", 
    "\n", 
    "void traverse(struct entry * listPtr)\n", 
    "{\n", 
    "    struct entry * tPtr = listPtr;\n", 
    "\n", 
    "    while (tPtr != NULL)\n", 
    "    {\n", 
    "        printf(\"%i\\n\", tPtr->value);\n", 
    "        tPtr = tPtr->next;\n", 
    "    }\n", 
    "    printf(\"-----\\n\");\n", 
    " \n", 
    "}\n", 
    "\n", 
    "bool search(struct entry * listPtr,  int n)\n", 
    "{\n", 
    "    struct entry * temPtr;\n", 
    "    temPtr = listPtr;\n", 
    "    while (temPtr != NULL)\n", 
    "    {\n", 
    "        if (temPtr->value == n)\n", 
    "        {\n", 
    "            return true;\n", 
    "        }    \n", 
    "        temPtr = temPtr->next;\n", 
    "    }\n", 
    "    return false;\n", 
    "}\n", 
    "\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "\n", 
    "int main(int argc, char *argv[])\n", 
    "{\n", 
    "    int x;\n", 
    "\n", 
    "    printf(\"%d\\n\", argc);\n", 
    "    for (x = 0; x < argc; x++)\n", 
    "        printf(\"%s\\n\", argv[x]);\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "void swap(int *i, int *j)\n", 
    "{\n", 
    "    int t;\n", 
    "\n", 
    "    t = *i;\n", 
    "    *i = *j;\n", 
    "    *j = t;\n", 
    "}\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int *a = malloc(sizeof(int)); int *b = malloc(sizeof(int));\n", 
    "\n", 
    "    *a = 5; *b = 10; \n", 
    "\n", 
    "    printf(\"%d %d\\n\", *a, *b);\n", 
    "\n", 
    "    swap(a, b);\n", 
    "\n", 
    "    printf(\"%d %d\\n\", *a, *b);\n", 
    "\n", 
    "    free(a);\n", 
    "    free(b);\n", 
    "\n", 
    "    return 0;\n", 
    "    \n", 
    "}\n", 
    "//Tries-going to set up simple word search\n", 
    "#include <stdio.h>\n", 
    "#include <string.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <stdbool.h>\n", 
    "\n", 
    "#define SIZE 26\n", 
    "\n", 
    "typedef struct node node;\n", 
    "\n", 
    "struct node\n", 
    "{\n", 
    "    bool flag;// could also be string definition\n", 
    "    struct node * children[SIZE];\n", 
    "}\n", 
    "children[SIZE] = {NULL,};\n", 
    "// hash function\n", 
    "int hash_func(char c);\n", 
    "\n", 
    "// insert new word\n", 
    "node * insertWord(node * head, char * str);\n", 
    "\n", 
    "// search for word\n", 
    "bool search(node * head, char * str);\n", 
    "\n", 
    "//go through and print\n", 
    "void traverse(node * head);\n", 
    "\n", 
    "//remove a word\n", 
    "node * removeWord(node * head, char * str);\n", 
    "\n", 
    "//free memory\n", 
    "void freeTrie(node * head);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    node * head = malloc(sizeof(node));\n", 
    "    head->flag = false;\n", 
    "    \n", 
    "    \n", 
    "\n", 
    "    head = insertWord(head, \"bath\");\n", 
    "    head = insertWord(head, \"bat\");\n", 
    "    head = insertWord(head, \"bar\");\n", 
    "    head = insertWord(head, \"amp\");\n", 
    "    head = insertWord(head, \"ask\");\n", 
    "\n", 
    "    if (search(head, \"zoo\"))\n", 
    "        printf(\"It is here.\\n\");\n", 
    "    else\n", 
    "        printf(\"It is not here.\\n\");\n", 
    "\n", 
    "\n", 
    "    /*head = removeWord(head, \"bike\");\n", 
    "    head = removeWord(head, \"zoology\");\n", 
    "    head = removeWord(head, \"zoo\");\n", 
    "    head = removeWord(head, \"bath\");\n", 
    "    head = removeWord(head, \"bat\");\n", 
    "    head = removeWord(head, \"bar\");*/\n", 
    "\n", 
    "\n", 
    "    if (search(head, \"zoo\"))\n", 
    "        printf(\"It is here.\\n\");\n", 
    "    else\n", 
    "        printf(\"It is not here.\\n\");\n", 
    "\n", 
    "    if (search(head, \"bat\"))\n", 
    "        printf(\"It is here.\\n\");\n", 
    "    else\n", 
    "        printf(\"It is not here.\\n\");\n", 
    "\n", 
    "    printf(\"\\n\\n\");\n", 
    "\n", 
    "    freeTrie(head);\n", 
    "    return 0;\n", 
    "\n", 
    "}\n", 
    "\n", 
    "int hash_func(char c)\n", 
    "{\n", 
    "    int hash = toupper(c) - 'A';\n", 
    "    return hash % SIZE;\n", 
    "}\n", 
    "\n", 
    "node * insertWord(node * head, char * str)\n", 
    "{\n", 
    "    char c;\n", 
    "    int i, n;\n", 
    "    node * temp = head;\n", 
    "\n", 
    "    for (i = 0, n = strlen(str); i < n; i++)\n", 
    "    {\n", 
    "        c = hash_func(str[i]);\n", 
    "\n", 
    "        if (head->children[c] == NULL)        \n", 
    "        {\n", 
    "            node * newnode = malloc(sizeof(node));\n", 
    "            newnode->flag = false;\n", 
    "            head->children[c] = newnode;\n", 
    "            head = head->children[c];  \n", 
    "\t}\n", 
    "        else\n", 
    "        {\n", 
    "            head = head->children[c];\n", 
    "        }\n", 
    "    }     \n", 
    "    \n", 
    "    head->flag = true; \n", 
    "\n", 
    "    return temp;\n", 
    "}\n", 
    "\n", 
    "bool search(node * head, char * str)\n", 
    "{\n", 
    "    char c;\n", 
    "    int i, n;\n", 
    "    node * temp = head;\n", 
    "\n", 
    "\n", 
    "    for (i = 0, n = strlen(str); i < n; i++)\n", 
    "    {\n", 
    "        c = hash_func(str[i]);\n", 
    "        if (temp == NULL)\n", 
    "            return false;\n", 
    "        temp = temp->children[c];\n", 
    "       \n", 
    "    } \n", 
    "\n", 
    "    if (temp == NULL)\n", 
    "    {\n", 
    "        return false;\n", 
    "    }\n", 
    "    else if (temp->flag == false)\n", 
    "    {\n", 
    "        return false;\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        return true;\n", 
    "    }\n", 
    "    \n", 
    "}\n", 
    "\n", 
    "node * removeWord(node * head, char * str)\n", 
    "{\n", 
    "    char c;\n", 
    "    int i, n;\n", 
    "    bool empty = true;\n", 
    "    node * temp = head;\n", 
    "\n", 
    "\n", 
    "    for (i = 0, n = strlen(str); i < n; i++)\n", 
    "    {\n", 
    "        if (temp == NULL)\n", 
    "            break;\n", 
    "        c = hash_func(str[i]);\n", 
    "        temp = temp->children[c];\n", 
    "    } \n", 
    "\n", 
    "    if (temp == NULL)\n", 
    "    {\n", 
    "        printf(\"That word is not here\\n\");\n", 
    "        return head;\n", 
    "    }\n", 
    "    else if (temp->flag == false)\n", 
    "    {\n", 
    "        printf(\"That word is not here.\\n\");\n", 
    "        return head;\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        temp->flag = false;\n", 
    "        for (i = 0; i < 26; i++)\n", 
    "        {\n", 
    "            if (temp->children[i] != NULL)\n", 
    "            {\n", 
    "                empty = false;\n", 
    "                break;\n", 
    "            }\n", 
    "        }\n", 
    "       \n", 
    "        if (empty) \n", 
    "            free(temp);\n", 
    "\n", 
    "        printf(\"That word has been removed.\\n\");\n", 
    "\n", 
    "        return head; \n", 
    "    }\n", 
    "\n", 
    "}\n", 
    "\n", 
    "//Work on this later?\n", 
    "void freeTrie(node * head)\n", 
    "{\n", 
    "    int i;\n", 
    "\n", 
    "\n", 
    "    for (i = 0; i < SIZE; i++)\n", 
    "    {\n", 
    "        if (head->children[i] != NULL)\n", 
    "        {\n", 
    "            freeTrie(head->children[i]);\n", 
    "        }\n", 
    "    }\n", 
    "    free(head);\n", 
    "}\n", 
    " \n", 
    "// shit work on this one later too!\n", 
    "/*void traverse(node * head)\n", 
    "{\n", 
    "    int i;\n", 
    "    int k;\n", 
    "    //int array[26] = {0,};\n", 
    "    node * temp = head;\n", 
    "\n", 
    "    \n", 
    "    for (i = 0; i < SIZE; i++)\n", 
    "    {\n", 
    "        if (head->children[i] != NULL)\n", 
    "        {\n", 
    "            printf(\"%c-\", 'A' + i);\n", 
    "            break;\n", 
    "        } \n", 
    "        \n", 
    "    }\n", 
    "\n", 
    "    k = i;\n", 
    "\n", 
    "    for (i = 0; i < SIZE; i++)\n", 
    "    {\n", 
    "        if (head->children[k]->children[i] != NULL)        \n", 
    "        {\n", 
    "            printf(\"%c-\", 'A' + i);\n", 
    "            traverse(head->children[k]->children[i]);\n", 
    "        } \n", 
    "    }\n", 
    "\n", 
    "    //Okay, with this statement I erased the flag\n", 
    "    if (head->children[k]->flag == true)\n", 
    "    {\n", 
    "        head->children[k]->flag == false;\n", 
    "        printf(\"\\n\");\n", 
    "        return;     \n", 
    "    }*/\n", 
    "    /*if (head->children[k] == NULL || head->children[k]->flag == true)\n", 
    "    {\n", 
    "        printf(\"\\n\");\n", 
    "        return;\n", 
    "    }\n", 
    "\n", 
    "}*/\n", 
    "/*void traverse(node * head)\n", 
    "{\n", 
    "    int i;\n", 
    "    \n", 
    "    for (i = 0; i < SIZE; i++)\n", 
    "    {\n", 
    "        while (head->children[i] != NULL)\n", 
    "        {\n", 
    "            if (head->children[i]->flag == false)\n", 
    "            {\n", 
    "                printf(\"%c\", 'A' + i);\n", 
    "            }\n", 
    "            traverse(head->children[i]);\n", 
    "        }    \n", 
    "    }\n", 
    "}*/\n", 
    "//Messing around with arrays\n", 
    "#include <stdio.h>\n", 
    "#include <time.h>\n", 
    "\n", 
    "#define MAX 10\n", 
    "\n", 
    "int a[MAX];\n", 
    "int rand_seed = 10;\n", 
    "//From K&R - returns random number between 0 and 32767\n", 
    "\n", 
    "int rand();\n", 
    "\n", 
    "void bubbleSort(int array[]);\n", 
    "\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "    \n", 
    "    //Fill Array\n", 
    "    \n", 
    "    for (i = 0; i < MAX; i++)\n", 
    "    {\n", 
    "        a[i] = rand();\n", 
    "        printf(\"%d\\n\", a[i]);\n", 
    "    }\n", 
    "\n", 
    "    bubbleSort(a);\n", 
    "    printf(\"-----------------------\\n\");\n", 
    "    \n", 
    "    for (i = 0; i < MAX; i++)\n", 
    "        printf(\"%i\\n\", a[i]);\n", 
    "\n", 
    "\n", 
    "    return 0;\n", 
    "  \n", 
    "}\n", 
    "\n", 
    "\n", 
    "\n", 
    "int rand()\n", 
    "{\n", 
    "    rand_seed = rand_seed * 1103515245 + 12345;\n", 
    "    return (unsigned int)(rand_seed / 65536) % 32768;\n", 
    "}\n", 
    "\n", 
    "\n", 
    "void bubbleSort(int array[])\n", 
    "{\n", 
    "    int t, x, y;\n", 
    "\n", 
    "    for (x = 0; x < MAX; x++)\n", 
    "        for (y = 0; y < MAX - x - 1; y++)\n", 
    "            if (array[y] > array[y + 1])\n", 
    "            {\n", 
    "                t = array[y];\n", 
    "                array[y] = array[y + 1];\n", 
    "                array[y + 1] = t; \n", 
    "            }\n", 
    "    \n", 
    "    return;\n", 
    "\n", 
    "}\n", 
    "//testing bubble sort\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <time.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i, j, n, temp, ctr, didSwap;\n", 
    "    time_t t;\n", 
    "\n", 
    "    srand(time(&t)); //Seeds rand with system time\n", 
    "\n", 
    "    int array[10];\n", 
    "\n", 
    "    //fills array with 10 random numbers\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        array[i] = (rand() % 99) + 1;\n", 
    "\n", 
    "    //prints array\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");   \n", 
    "\n", 
    "    //sorting algorithm is here\n", 
    "    for (ctr = 0, n = 10; ctr < 10; ctr++)\n", 
    "    {\n", 
    "        didSwap = 0;\n", 
    "        for (i = 0, j = 1; j < n; j++, i++)\n", 
    "        {\n", 
    "            if (array[j] < array[i])\n", 
    "            {\n", 
    "                temp = array[j];\n", 
    "                array[j] = array[i];\n", 
    "                array[i] = temp; \n", 
    "                didSwap = 1;\n", 
    "            }\n", 
    "        }\n", 
    "        n -= 1;\n", 
    "        if (didSwap == 0)\n", 
    "            break;\n", 
    "    }\n", 
    "\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    for (i = 0; i < 10; i++)\n", 
    "        printf(\"%d \", array[i]);\n", 
    "\n", 
    "    printf(\"\\n\");\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "//testing fseek\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    FILE * out = fopen(\"out.txt\", \"w+\");\n", 
    "\n", 
    "    fputs(\"Team Sluggets Fever!\", out);\n", 
    "\n", 
    "    char buffer[50];\n", 
    "\n", 
    "    fseek(out, -6, SEEK_END);\n", 
    "\n", 
    "    fgets(buffer, 50, out);\n", 
    "    printf(\"%s\\n\", buffer);\n", 
    "\n", 
    "    fclose(out);\n", 
    "}\n", 
    "#include <cs50.h>\n", 
    "#include <stdio.h>\n", 
    "#include <string.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    printf(\"Please give me a string: \");\n", 
    "    string s = GetString();\n", 
    "    for (int i = 0; i < strlen(s); i++)\n", 
    "    {\n", 
    "        printf(\"%c\\n\", s[i]);\n", 
    "    }\n", 
    "}\n", 
    "//#include <cs50.h>\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(int argc, char argv[])\n", 
    "{\n", 
    "    printf(\"%c\\n\", argv[1]);\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int **p;\n", 
    "    int * q;\n", 
    "\n", 
    "    p = malloc(sizeof(int *));\n", 
    "    *p = malloc(sizeof(int));\n", 
    "    **p = 12;\n", 
    "    q = *p;\n", 
    "    printf(\"%d\\n\", *q);\n", 
    "    free(q);\n", 
    "    free(p);\n", 
    "    return 0;\n", 
    "}\n", 
    "/* Program sorts word by alpha using a hash function, then inserts\n", 
    "them into hash table using a separate function, THIS VERSION USES \n", 
    "AN ARRAY OF LINKED LISTS INSTEAD OF ARRAY OF STRING POINTERS */\n", 
    "#include <stdio.h>\n", 
    "#include <ctype.h>\n", 
    "#include <string.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "#define SIZE 26\n", 
    "\n", 
    "typedef struct node\n", 
    "{\n", 
    "    char * string;\n", 
    "    struct node * next;\n", 
    "}node;\n", 
    "\n", 
    "\n", 
    "\n", 
    "//returns an index for inputting into hash table\n", 
    "int hash_func(char * key);\n", 
    "\n", 
    "/* use hash_func(). Gets a string from user, allocates memory, \n", 
    "and insert into the hash table using linked lists*/\n", 
    "void insertIntoTable(node * array[]);\n", 
    "\n", 
    "/* Traverses through to print all elements including\n", 
    "the linked nested ones */\n", 
    "void traverse(node * array[]);\n", 
    "\n", 
    "/* removes an element from the linked list, sets index pointer\n", 
    "to NULL if that removed element was it's last one */\n", 
    "//TODO removeFromTable(node * array[], char * string\n", 
    "\n", 
    "//searches through for a string\n", 
    "//TODO searchHTLL(node * array[], char * str);\n", 
    "\n", 
    "/* I had trouble with this one...frees the whole chain */\n", 
    "void freeChain(node * array[]);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int ctr;\n", 
    "\n", 
    "   \n", 
    "    // set up actual hash table, array of pointers to struct node type \n", 
    "    node * hashArray[SIZE] = {NULL,};\n", 
    "    \n", 
    "\n", 
    "    // loop through however many entries required\n", 
    "    for (ctr = 0; ctr < 10; ctr++)\n", 
    "    {\n", 
    "        insertIntoTable(hashArray);\n", 
    "    }\n", 
    "\n", 
    "    traverse(hashArray);\n", 
    "\n", 
    "    freeChain(hashArray);\n", 
    "\n", 
    "\n", 
    "\n", 
    "    return 0;\n", 
    "\n", 
    "\n", 
    "}\n", 
    "\n", 
    "int hash_func(char * key)\n", 
    "{\n", 
    "    /* This turns first letter of item to be put into\n", 
    "table into basically an index number of an array by\n", 
    "capitializing it and then subtracting in from 'A' which is \n", 
    "really an integer that corresponds to that letter on the\n", 
    "ascii table. This subtraction gives us where to insert in\n", 
    "the array! */\n", 
    "    int hash = toupper(key[0]) - 'A';\n", 
    "\n", 
    "    return hash % SIZE; \n", 
    "}\n", 
    "\n", 
    "\n", 
    "void insertIntoTable(node * array[])\n", 
    "{\n", 
    "    // allow 40 characters for words to be stored\n", 
    "    char key[40];\n", 
    "\n", 
    "    // retrieves and stores string from user\n", 
    "    printf(\"Submit string to be entered into table: \");\n", 
    "    fgets(key, 39, stdin);\n", 
    "\n", 
    "    // creates appropriate index from hash_func\n", 
    "    int index = hash_func(key);\n", 
    "\n", 
    "    /* allocates appropriate memory and copies string into correct index\n", 
    "       and the while loop just bumps down the index if correct spot is\n", 
    "       take */\n", 
    "    if (array[index] != NULL)\n", 
    "    {\n", 
    "\n", 
    "        // allocate memory for new node\n", 
    "        node * newnode = malloc(sizeof(node));\n", 
    "\n", 
    "        //initialize new node properly\n", 
    "        newnode->next = NULL;\n", 
    "        newnode->string = malloc(sizeof(key));\n", 
    "\n", 
    "        //copy user supplied value into new node's string\n", 
    "        strncpy(newnode->string, key, 39);\n", 
    "\n", 
    "        /* update pointers: newnode's next pointer must now\n", 
    "           point to what was previously the first node, so\n", 
    "           make it have the value of the original index head\n", 
    "           pointer. */\n", 
    "        newnode->next = array[index];\n", 
    "\n", 
    "        /* The original index head pointer must now point to\n", 
    "           the new node since we are prepending new entries */\n", 
    "        array[index] = newnode;\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        // allocate memory for new node\n", 
    "        node * newnode = malloc(sizeof(node));\n", 
    "\n", 
    "        // properly initialize new node\n", 
    "        newnode->next = NULL;\n", 
    "        newnode->string = malloc(sizeof(key));\n", 
    "\n", 
    "        /* since this is the first node we simply have to\n", 
    "           make the original index head point to our \n", 
    "           new node */\n", 
    "        strncpy(newnode->string, key, 39);\n", 
    "        array[index] = newnode;\n", 
    "        \n", 
    "    }\n", 
    "\n", 
    "    return;\n", 
    "}\n", 
    "\n", 
    "void traverse(node * array[])\n", 
    "{\n", 
    "    int ctr;\n", 
    "    /* Very important! I kept trying to make a temp pointer\n", 
    "to store current pointer by making temp pointer THAT WOULD POINT TO \n", 
    "THE WHOLE ARRAY! I needed to make a simple node * pointer and assign\n", 
    "into that the contents of ONLY ONE INDEX!! */\n", 
    "    node * temp;\n", 
    "\n", 
    "    // loops through and prints contents of hash table\n", 
    "    for (ctr = 0; ctr < SIZE; ctr++)\n", 
    "    {\n", 
    "        temp = array[ctr];\n", 
    "        while (temp != NULL)\n", 
    "        {\n", 
    "            printf(\"%s\\n\", temp->string);\n", 
    "            temp = temp->next;\n", 
    "               \n", 
    "        }\n", 
    "    } \n", 
    "\n", 
    "\n", 
    "    return;\n", 
    "\n", 
    "}\n", 
    "\n", 
    "void freeChain(node * array[])\n", 
    "{\n", 
    "    int ctr;\n", 
    "    node * temp; \n", 
    "    node * test;\n", 
    " \n", 
    "    /* loops through and frees the memory allocated before program exit */\n", 
    "    for (ctr = 0; ctr < SIZE; ctr++)\n", 
    "    {\n", 
    "        temp = array[ctr];\n", 
    "\n", 
    "        while (temp != NULL)\n", 
    "        {    \n", 
    "            test = temp;\n", 
    "            temp = temp->next;\n", 
    "            free(test->string);\n", 
    "            free(test);\n", 
    "        }\n", 
    "    }  \n", 
    "\n", 
    "    return;\n", 
    "\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "#include <string.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "    char * word = malloc(9 * sizeof(char));\n", 
    "    word = \"SLUGGETS\";\n", 
    "\n", 
    "    int n = strlen(word);\n", 
    "\n", 
    "    char nword[n];\n", 
    "   \n", 
    "\n", 
    "    for (i = 0; i <= n; i++)\n", 
    "    {\n", 
    "        nword[i] = tolower(*word++);\n", 
    "    }\n", 
    "    \n", 
    "   \n", 
    "   \n", 
    "    printf(\"%s\\n\", nword);\n", 
    "    return 0; \n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    \n", 
    "}\n", 
    "//Binary node and binary search tree, but incompatible pointer errors\n", 
    "#include <stdio.h>\n", 
    "#include <stdbool.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "typedef struct node\n", 
    "{\n", 
    "    int data;\n", 
    "    struct node * left;\n", 
    "    struct node * right;\n", 
    "}node; \n", 
    "\n", 
    "bool search(node * root, int value);\n", 
    "\n", 
    "// function to insert a value\n", 
    "node * insert(node * r, int value);\n", 
    "\n", 
    "// function to remove a value--leaving this undone for now\n", 
    "//TODO node * remove(node * r, int value);\n", 
    "\n", 
    "// function to free all allocated memory\n", 
    "//TODO void freeTree(node * r);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    node * head = NULL;\n", 
    "\n", 
    "    head = insert(head, 23);\n", 
    "    head = insert(head, 44);\n", 
    "    head = insert(head, 1);\n", 
    "    head = insert(head, 14);\n", 
    "    head = insert(head, 5);\n", 
    "    head = insert(head, 5);\n", 
    "    \n", 
    "\n", 
    "    if (search(head, 14))\n", 
    "        printf(\"Found it\\n\");\n", 
    "    else \n", 
    "        printf(\"Not here mang\\n\");\n", 
    "\n", 
    "    if (search(head, 5))\n", 
    "        printf(\"Found it\\n\");\n", 
    "    else \n", 
    "        printf(\"Not here mang\\n\");\n", 
    "\n", 
    "    //freeTree(head);\n", 
    "\n", 
    "    \n", 
    "    \n", 
    "    return 0;\n", 
    "}\n", 
    "\n", 
    "bool search(struct node * root, int value)\n", 
    "{\n", 
    "    if (root == NULL)\n", 
    "    {\n", 
    "        return false;\n", 
    "    }\n", 
    "    else if (root->data == value)\n", 
    "    {\n", 
    "        return true;\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        if (value < root->data)\n", 
    "        {\n", 
    "            search(root->left, value);\n", 
    "        }\n", 
    "        else \n", 
    "        {\n", 
    "            search(root->right, value);\n", 
    "        }\n", 
    "    }\n", 
    "}\n", 
    "\n", 
    "node *  insert(node * r, int value)\n", 
    "{\n", 
    "    if (r == NULL)\n", 
    "    {\n", 
    "        r = malloc(sizeof(node));\n", 
    "        r->data = value;\n", 
    "        r->left = NULL;\n", 
    "        r->right = NULL;\n", 
    "        return r;\n", 
    "    }\n", 
    "    else \n", 
    "    {\n", 
    "        if (value == r->data)\n", 
    "        {\n", 
    "            printf(\"Value already in table.\\n\");\n", 
    "            return r;\n", 
    "        }\n", 
    "        else if (value < r->data)\n", 
    "        {\n", 
    "            r->left = insert(r->left, value);\n", 
    "        }\n", 
    "        else \n", 
    "        {\n", 
    "            r->right = insert(r->right, value);\n", 
    "        }\n", 
    "\n", 
    "        return r;\n", 
    "    }\n", 
    "}\n", 
    "\n", 
    "/* TODO node * remove(node * r, int value)\n", 
    "{\n", 
    "    node * tptr;\n", 
    "    node * temp\n", 
    "    tptr = r;\n", 
    "\n", 
    "    if (root == NULL)\n", 
    "    {\n", 
    "        printf(\"Value is not present, cannot remove.\\n\");\n", 
    "        return r;\n", 
    "    }\n", 
    "    else if (root->data == value)\n", 
    "    {\n", 
    "        \n", 
    "        return true;\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        if (value < root->data)\n", 
    "        {\n", 
    "            remove(root->left, value);\n", 
    "        }\n", 
    "        else \n", 
    "        {\n", 
    "            search(root->right, value);\n", 
    "        }\n", 
    "    }\n", 
    "}*/\n", 
    "\n", 
    "/* working on this one! void freeTree(node * r)\n", 
    "{\n", 
    "    while (r != NULL)\n", 
    "    {\n", 
    "        if (r->left && r->right == NULL)\n", 
    "        {\n", 
    "            freeTree(r);\n", 
    "        }\n", 
    "        else \n", 
    "        {\n", 
    "            if (r->left != NULL)\n", 
    "            {\n", 
    "               freeTree(r->left);\n", 
    "            }\n", 
    "            else\n", 
    "            {\n", 
    "               freeTree(r->right);\n", 
    "            }\n", 
    "        }\n", 
    "    }\n", 
    "    \n", 
    "}*/\n", 
    "/* Program sorts word by alpha using a hash function, then inserts\n", 
    "them into hash table using a separate function */\n", 
    "#include <stdio.h>\n", 
    "#include <ctype.h>\n", 
    "#include <string.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "#define SIZE 26\n", 
    "\n", 
    "\n", 
    "//returns an index for inputting into hash table\n", 
    "int hash_func(char * key);\n", 
    "\n", 
    "/* use hash_func(). Gets a string from user, allocates memory, \n", 
    "and insert into the hash table */\n", 
    "void insertIntoTable(char * array[]);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int ctr;\n", 
    "\n", 
    "    // set up actual has table of give size\n", 
    "    char * hashArray[SIZE] = {NULL,};\n", 
    "\n", 
    "    // loop through however many entries required\n", 
    "    for (ctr = 0; ctr < 5; ctr++)\n", 
    "    {\n", 
    "        insertIntoTable(hashArray);\n", 
    "    }\n", 
    "\n", 
    "    // loops through and prints contents of hash table\n", 
    "    for (ctr = 0; ctr < 26; ctr++)\n", 
    "    {\n", 
    "        if (hashArray[ctr] != NULL)\n", 
    "        {\n", 
    "            printf(\"%s\\n\", hashArray[ctr]);\n", 
    "        }\n", 
    "    } \n", 
    "\n", 
    "    // loops through and frees the memory allocated before program exit\n", 
    "    for (ctr = 0; ctr < 26; ctr++)\n", 
    "    {\n", 
    "        if (hashArray[ctr] != NULL)\n", 
    "        {\n", 
    "            free(hashArray[ctr]);\n", 
    "        }\n", 
    "    } \n", 
    "\n", 
    "    return 0;\n", 
    "\n", 
    "\n", 
    "}\n", 
    "\n", 
    "int hash_func(char * key)\n", 
    "{\n", 
    "    /* This turns first letter of item to be put into\n", 
    "table into basically an index number of an array by\n", 
    "capitializing it and then subtracting in from 'A' which is \n", 
    "really an integer that corresponds to that letter on the\n", 
    "ascii table. This subtraction gives us where to insert in\n", 
    "the array! */\n", 
    "    int hash = toupper(key[0]) - 'A';\n", 
    "\n", 
    "    return hash % SIZE; \n", 
    "}\n", 
    "\n", 
    "\n", 
    "void insertIntoTable(char * array[])\n", 
    "{\n", 
    "    // allow 40 characters for words to be stored\n", 
    "    char key[40];\n", 
    "\n", 
    "    // retrieves and stores string from user\n", 
    "    printf(\"Submit string to be entered into table: \");\n", 
    "    fgets(key, 39, stdin);\n", 
    "\n", 
    "    // creates appropriate index from hash_func\n", 
    "    int index = hash_func(key);\n", 
    "\n", 
    "    /* allocates appropriate memory and copies string into correct index\n", 
    "       and the while loop just bumps down the index if correct spot is\n", 
    "       take */\n", 
    "    while (array[index] != NULL)\n", 
    "    {\n", 
    "        index++;\n", 
    "    }\n", 
    "    array[index] = malloc(sizeof(key));\n", 
    "    strncpy(array[index], key, 39);\n", 
    "\n", 
    "    return;\n", 
    "}\n", 
    "\n", 
    "/* UPDATE! I am going to try and make this program work so that the\n", 
    "functions are passed JUST the pointer and not the WHOLE array,\n", 
    "which it appears that I did. They were getting passed the array\n", 
    "like this: func( \n", 
    "Program sorts word by alpha using a hash function, then inserts\n", 
    "them into hash table using a separate function, THIS VERSION USES \n", 
    "AN ARRAY OF LINKED LISTS INSTEAD OF ARRAY OF STRING POINTERS */\n", 
    "#include <stdio.h>\n", 
    "#include <ctype.h>\n", 
    "#include <string.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "#define SIZE 26\n", 
    "\n", 
    "typedef struct node\n", 
    "{\n", 
    "    char * string;\n", 
    "    struct node * next;\n", 
    "}node;\n", 
    "\n", 
    "\n", 
    "\n", 
    "//returns an index for inputting into hash table\n", 
    "int hash_func(char * key);\n", 
    "\n", 
    "/* use hash_func(). Gets a string from user, allocates memory, \n", 
    "and insert into the hash table using linked lists*/\n", 
    "void insertIntoTable(node * array);\n", 
    "\n", 
    "/* Traverses through to print all elements including\n", 
    "the linked nested ones */\n", 
    "//void traverse(node * array[]);\n", 
    "\n", 
    "/* removes an element from the linked list, sets index pointer\n", 
    "to NULL if that removed element was it's last one */\n", 
    "//TODO removeFromTable(node * array[], char * string\n", 
    "\n", 
    "//searches through for a string\n", 
    "//TODO searchHTLL(node * array[], char * str);\n", 
    "\n", 
    "/* I had trouble with this one...frees the whole chain */\n", 
    "//void freeChain(node * array[]);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int ctr;\n", 
    "\n", 
    "   \n", 
    "    // set up actual hash table, array of pointers to struct node type \n", 
    "    node * hashArray[SIZE] = {NULL,};\n", 
    "    \n", 
    "    \n", 
    "\n", 
    "    // loop through however many entries required\n", 
    "    for (ctr = 0; ctr < 10; ctr++)\n", 
    "    {\n", 
    "        insertIntoTable(hashArray);\n", 
    "    }\n", 
    "\n", 
    "    //traverse(hashArray);\n", 
    "\n", 
    "    //freeChain(hashArray);\n", 
    "\n", 
    "\n", 
    "\n", 
    "    return 0;\n", 
    "\n", 
    "\n", 
    "}\n", 
    "\n", 
    "int hash_func(char * key)\n", 
    "{\n", 
    "    /* This turns first letter of item to be put into\n", 
    "table into basically an index number of an array by\n", 
    "capitializing it and then subtracting in from 'A' which is \n", 
    "really an integer that corresponds to that letter on the\n", 
    "ascii table. This subtraction gives us where to insert in\n", 
    "the array! */\n", 
    "    int hash = toupper(key[0]) - 'A';\n", 
    "\n", 
    "    return hash % SIZE; \n", 
    "}\n", 
    "\n", 
    "\n", 
    "void insertIntoTable(node * array)\n", 
    "{\n", 
    "    // allow 40 characters for words to be stored\n", 
    "    char key[40];\n", 
    "\n", 
    "    // retrieves and stores string from user\n", 
    "    printf(\"Submit string to be entered into table: \");\n", 
    "    fgets(key, 39, stdin);\n", 
    "\n", 
    "    // creates appropriate index from hash_func\n", 
    "    int index = hash_func(key);\n", 
    "\n", 
    "    /* allocates appropriate memory and copies string into correct index\n", 
    "       and the while loop just bumps down the index if correct spot is\n", 
    "       take */\n", 
    "    if (array[index] != NULL)\n", 
    "    {\n", 
    "\n", 
    "        // allocate memory for new node\n", 
    "        node * newnode = malloc(sizeof(node));\n", 
    "\n", 
    "        //initialize new node properly\n", 
    "        newnode->next = NULL;\n", 
    "        newnode->string = malloc(sizeof(key));\n", 
    "\n", 
    "        //copy user supplied value into new node's string\n", 
    "        strncpy(newnode->string, key, 39);\n", 
    "\n", 
    "        /* update pointers: newnode's next pointer must now\n", 
    "           point to what was previously the first node, so\n", 
    "           make it have the value of the original index head\n", 
    "           pointer. */\n", 
    "        newnode->next = array[index];\n", 
    "\n", 
    "        /* The original index head pointer must now point to\n", 
    "           the new node since we are prepending new entries */\n", 
    "        array[index] = newnode;\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        // allocate memory for new node\n", 
    "        node * newnode = malloc(sizeof(node));\n", 
    "\n", 
    "        // properly initialize new node\n", 
    "        newnode->next = NULL;\n", 
    "        newnode->string = malloc(sizeof(key));\n", 
    "\n", 
    "        /* since this is the first node we simply have to\n", 
    "           make the original index head point to our \n", 
    "           new node */\n", 
    "        strncpy(newnode->string, key, 39);\n", 
    "        array[index] = newnode;\n", 
    "        \n", 
    "    }\n", 
    "\n", 
    "    return;\n", 
    "}\n", 
    "\n", 
    "/*void traverse(node * array[])\n", 
    "{\n", 
    "    int ctr;\n", 
    "     Very important! I kept trying to make a temp pointer\n", 
    "to store current pointer by making temp pointer THAT WOULD POINT TO \n", 
    "THE WHOLE ARRAY! I needed to make a simple node * pointer and assign\n", 
    "into that the contents of ONLY ONE INDEX!! \n", 
    "    node * temp;\n", 
    "\n", 
    "    // loops through and prints contents of hash table\n", 
    "    for (ctr = 0; ctr < SIZE; ctr++)\n", 
    "    {\n", 
    "        temp = array[ctr];\n", 
    "        while (temp != NULL)\n", 
    "        {\n", 
    "            printf(\"%s\\n\", temp->string);\n", 
    "            temp = temp->next;\n", 
    "               \n", 
    "        }\n", 
    "    } \n", 
    "\n", 
    "\n", 
    "    return;\n", 
    "\n", 
    "}\n", 
    "\n", 
    "void freeChain(node * array[])\n", 
    "{\n", 
    "    int ctr;\n", 
    "    node * temp; \n", 
    "    node * test;\n", 
    " \n", 
    "     loops through and frees the memory allocated before program exit\n", 
    "    for (ctr = 0; ctr < SIZE; ctr++)\n", 
    "    {\n", 
    "        temp = array[ctr];\n", 
    "\n", 
    "        while (temp != NULL)\n", 
    "        {    \n", 
    "            test = temp;\n", 
    "            temp = temp->next;\n", 
    "            free(test->string);\n", 
    "            free(test);\n", 
    "        }\n", 
    "    }  \n", 
    "\n", 
    "    return;\n", 
    "\n", 
    "}*/\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int i;\n", 
    "\n", 
    "    for (i = 0; i < 28; i++)\n", 
    "        printf(\"%i %c\\n\", i, i + 65);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "#include <stdio.h>\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int array[6] = {42, 23, 4, 16, 8, 15};\n", 
    "    int i, j, k, temp;\n", 
    "\n", 
    "    /*if (array[1] < array[0])\n", 
    "    {\n", 
    "        temp = array[0];\n", 
    "        array[0] = array[1];\n", 
    "        array[1] = temp; \n", 
    "    }*/\n", 
    "\n", 
    "    for (i = 1; i < 6; i++)\n", 
    "    {\n", 
    "        for (j = i; j > 0; j--) \n", 
    "        {\n", 
    "            while (array[j - 1] > array[j])\n", 
    "            {\n", 
    "                temp = array[j];\n", 
    "                array[j] = array[j - 1];\n", 
    "                array[j - 1] = temp;\n", 
    "            }\n", 
    "        }\n", 
    "        \n", 
    "    } \n", 
    "\n", 
    "    for (i = 0; i < 6; i++)\n", 
    "    {\n", 
    "        printf(\"%i\\n\", array[i]);\n", 
    "    }\n", 
    "\n", 
    "    return 0;\n", 
    "\n", 
    "    \n", 
    "}\n", 
    "// program for a doubly linked list\n", 
    "#include <stdio.h>\n", 
    "#include <stdlib.h>\n", 
    "#include <stdbool.h>\n", 
    "\n", 
    "typedef struct node\n", 
    "{\n", 
    "    int value;\n", 
    "    struct node * prev;\n", 
    "    struct node * next;\n", 
    "}node;\n", 
    "\n", 
    "//inserts new node into a doubly-linked list\n", 
    "node * insertEntry(node * ptr, int n);\n", 
    "\n", 
    "/* removes a node from a doubly-linked list\n", 
    "AND frees that allocated memory back */\n", 
    "node * removeEntry(node * ptr, int n);\n", 
    "\n", 
    "// iterates through doubly-linked list to print\n", 
    "void traverse(node * ptr);\n", 
    "\n", 
    "//iterates and frees all of the doubly-linked list\n", 
    "void freeDL(node * ptr);\n", 
    "\n", 
    "// searches through doubly-linked list for value\n", 
    "bool searchDL(node * ptr, int n);\n", 
    "\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    struct node * head = NULL;\n", 
    " \n", 
    "    /* Below is a good learing lesson, I made the\n", 
    "error of initializing new instances of nodes INSTEAD\n", 
    "of initializing pointers and then allocating the\n", 
    "appropriate node-sized memory for the doubly-linked\n", 
    "list. Even so, I continued to write a function that \n", 
    "inserted new POINTERS with MANUALLY ALLOCATED memory\n", 
    "so that i ended up with a doubly-linked list that had\n", 
    "directly initialized nodes and pointer-malloc initialized\n", 
    "nodes, and I wondered why I couldn't get functions to \n", 
    "work consistently with all of them.\n", 
    "All is fixed now I believe (fingers CROSSED)!!!\n", 
    "    node node1 = {100, NULL, NULL};\n", 
    "\n", 
    "    node node2 = {200, NULL, NULL};\n", 
    "\n", 
    "    node node3 = {300, NULL, NULL};\n", 
    "\n", 
    "    node node4 = {400, NULL, NULL};\n", 
    "\n", 
    "    head = &node1;\n", 
    "\n", 
    "    node1.next = &node2;\n", 
    "    node1.prev = head;\n", 
    "\n", 
    "    node2.next = &node3;\n", 
    "    node2.prev = &node1;    \n", 
    "\n", 
    "    node3.next = &node4;\n", 
    "    node3.prev = &node2;\n", 
    "\n", 
    "    node4.next = NULL;\n", 
    "    node4.prev = &node3;*/    \n", 
    "\n", 
    "    //traverse(head);\n", 
    "\n", 
    "    head = insertEntry(head, 83);\n", 
    "\n", 
    "    traverse(head);\n", 
    "\n", 
    "    head = insertEntry(head, 3);\n", 
    "    head = insertEntry(head, 183);\n", 
    "    head = insertEntry(head, 53);\n", 
    "    head = insertEntry(head, 13);\n", 
    "\n", 
    "    traverse(head);\n", 
    "\n", 
    "    head = removeEntry(head, 183);   \n", 
    "\n", 
    "    traverse(head);\n", 
    "\n", 
    "    if (searchDL(head, 100))\n", 
    "        printf(\"Found it\\n\");\n", 
    "    else\n", 
    "        printf(\"No esta aqui\\n\");\n", 
    "\n", 
    "    freeDL(head);\n", 
    "\n", 
    "    return 0;\n", 
    "}\n", 
    "\n", 
    "node * insertEntry(node * ptr, int n)\n", 
    "{\n", 
    "    node * tptr = ptr;\n", 
    "\n", 
    "    node  * newnode = malloc(sizeof(node));\n", 
    "\n", 
    "    newnode->value = n;\n", 
    "    newnode->prev = NULL;\n", 
    "    newnode->next = NULL;\n", 
    "\n", 
    "    if (ptr == NULL)\n", 
    "    {\n", 
    "        ptr = newnode;\n", 
    "        ptr->prev = ptr;\n", 
    "        return ptr;\n", 
    "    }\n", 
    "\n", 
    "    if (ptr->value > n)\n", 
    "    {\n", 
    "        newnode->next = ptr;\n", 
    "        ptr = newnode;\n", 
    "        newnode->prev = ptr;\n", 
    "        //ptr = tptr;\n", 
    "        return ptr;\n", 
    "    }\n", 
    "\n", 
    "    while (ptr->next != NULL && ptr->next->value < n)\n", 
    "    {\n", 
    "        ptr = ptr->next;\n", 
    "    }\n", 
    "\n", 
    "    if (ptr->next == NULL)\n", 
    "    {\n", 
    "        ptr->next = newnode;\n", 
    "        newnode->prev = ptr;     \n", 
    "        ptr = tptr;\n", 
    "        return ptr;\n", 
    "    }\n", 
    "    else\n", 
    "    {\n", 
    "        newnode->next = ptr->next;\n", 
    "        newnode->prev = ptr;\n", 
    "        ptr->next->prev = newnode;\n", 
    "        ptr->next = newnode;\n", 
    "        ptr = tptr;\n", 
    "        return ptr;\n", 
    "    }\n", 
    "\n", 
    "\n", 
    "    \n", 
    "\n", 
    "    return; \n", 
    "}\n", 
    "\n", 
    "node * removeEntry(node * ptr, int n)\n", 
    "{\n", 
    "    node * tptr;\n", 
    "    node * temp;\n", 
    "    tptr = ptr;\n", 
    "\n", 
    "    while (ptr != NULL)\n", 
    "    {\n", 
    "        if (ptr->value == n)\n", 
    "        {\n", 
    "            if (ptr->next == NULL)\n", 
    "            {\n", 
    "               //free(tptr->value);\n", 
    "               ptr->prev->next = NULL; \n", 
    "               temp = ptr;\n", 
    "               ptr = tptr;\n", 
    "               free(temp);\n", 
    "               printf(\"node with value: %i has been removed\\n\", n);\n", 
    "               return ptr;\n", 
    "            }\n", 
    "            \n", 
    "\n", 
    "            if (ptr->prev == ptr)\n", 
    "            {\n", 
    "                temp = ptr;\n", 
    "                ptr->next->prev = ptr;\n", 
    "                tptr = ptr->next;\n", 
    "                ptr->next = NULL;\n", 
    "                ptr = tptr;\n", 
    "                ptr->prev = ptr;\n", 
    "                temp->prev = NULL;\n", 
    "                free(temp);\n", 
    "                printf(\"node with value: %i has been removed\\n\", n);\n", 
    "                return ptr;\n", 
    "      \n", 
    "            }\n", 
    "            else\n", 
    "            {\n", 
    "                ptr->next->prev = ptr->prev;\n", 
    "                ptr->prev->next = ptr->next;\n", 
    "                temp = ptr;\n", 
    "                ptr = tptr;\n", 
    "                free(temp);\n", 
    "                printf(\"node with value: %i has been removed\\n\", n);\n", 
    "                return ptr;\n", 
    "            }\n", 
    "        }\n", 
    "        ptr = ptr->next; \n", 
    "    }\n", 
    "\n", 
    "    printf(\"Entry with value: %i cannot be removed, it is not in list\\n\", n);\n", 
    "    return ptr;\n", 
    "}\n", 
    "\n", 
    "void traverse(node * ptr)\n", 
    "{\n", 
    "    while (ptr != NULL)\n", 
    "    {\n", 
    "        printf(\"%i\\n\", ptr->value);\n", 
    "        ptr = ptr->next;\n", 
    "    }\n", 
    "    printf(\"\\n\");\n", 
    "    \n", 
    "    return;\n", 
    "}\n", 
    "\n", 
    "void freeDL(node * ptr)\n", 
    "{\n", 
    "    node * test;\n", 
    "    node * temp = ptr;\n", 
    "\n", 
    "    while (temp != NULL)\n", 
    "    {\n", 
    "        test = temp;\n", 
    "        temp = temp->next;\n", 
    "        free(test); \n", 
    "    }\n", 
    "\n", 
    "    return;\n", 
    "}\n", 
    "\n", 
    "bool searchDL(node * ptr, int n)\n", 
    "{\n", 
    "    while (ptr != NULL)\n", 
    "    {\n", 
    "        if (ptr->value == n)\n", 
    "        {\n", 
    "            return true;\n", 
    "        }\n", 
    "        ptr = ptr->next;\n", 
    "    }\n", 
    "\n", 
    "    return false;\n", 
    "}\n", 
    "/* Program sorts word by alpha using a hash function, then inserts\n", 
    "them into hash table using a separate function. No free() func is \n", 
    "needed because there is no memory allocated from the heap, it\n", 
    "is all used and released from the stack */\n", 
    "#include <stdio.h>\n", 
    "#include <ctype.h>\n", 
    "#include <string.h>\n", 
    "#include <stdlib.h>\n", 
    "\n", 
    "#define SIZE 26\n", 
    "\n", 
    "\n", 
    "//returns an index for inputting into hash table\n", 
    "int hash_func(char * key);\n", 
    "\n", 
    "/* use hash_func(). Gets a string from user, allocates memory, \n", 
    "and insert into the hash table */\n", 
    "void insertIntoTable(char * array[]);\n", 
    "\n", 
    "//traverses and prints hashtable\n", 
    "//TODO traverse(char * array[]);\n", 
    "\n", 
    "//removes string from table\n", 
    "//TODO removeFromTable(char * array[], char * str);\n", 
    "\n", 
    "//searches table for string\n", 
    "//TODO searchTable(char * array[], char * str);\n", 
    "\n", 
    "int main(void)\n", 
    "{\n", 
    "    int ctr;\n", 
    "\n", 
    "    // set up actual has table of give size\n", 
    "    char * hashArray[SIZE] = {NULL,};\n", 
    "\n", 
    "    // loop through however many entries required\n", 
    "    for (ctr = 0; ctr < 5; ctr++)\n", 
    "    {\n", 
    "        insertIntoTable(hashArray);\n", 
    "    }\n", 
    "\n", 
    "    // loops through and prints contents of hash table\n", 
    "    for (ctr = 0; ctr < 26; ctr++)\n", 
    "    {\n", 
    "        if (hashArray[ctr] != NULL)\n", 
    "        {\n", 
    "            printf(\"%s\\n\", hashArray[ctr]);\n", 
    "        }\n", 
    "    } \n", 
    "\n", 
    "    // loops through and frees the memory allocated before program exit\n", 
    "    for (ctr = 0; ctr < 26; ctr++)\n", 
    "    {\n", 
    "        if (hashArray[ctr] != NULL)\n", 
    "        {\n", 
    "            free(hashArray[ctr]);\n", 
    "        }\n", 
    "    } \n", 
    "\n", 
    "    return 0;\n", 
    "\n", 
    "\n", 
    "}\n", 
    "\n", 
    "int hash_func(char * key)\n", 
    "{\n", 
    "    /* This turns first letter of item to be put into\n", 
    "table into basically an index number of an array by\n", 
    "capitializing it and then subtracting in from 'A' which is \n", 
    "really an integer that corresponds to that letter on the\n", 
    "ascii table. This subtraction gives us where to insert in\n", 
    "the array! */\n", 
    "    int hash = toupper(key[0]) - 'A';\n", 
    "\n", 
    "    return hash % SIZE; \n", 
    "}\n", 
    "\n", 
    "\n", 
    "void insertIntoTable(char * array[])\n", 
    "{\n", 
    "    // allow 40 characters for words to be stored\n", 
    "    char key[40];\n", 
    "\n", 
    "    // retrieves and stores string from user\n", 
    "    printf(\"Submit string to be entered into table: \");\n", 
    "    fgets(key, 39, stdin);\n", 
    "\n", 
    "    // creates appropriate index from hash_func\n", 
    "    int index = hash_func(key);\n", 
    "\n", 
    "    /* allocates appropriate memory and copies string into correct index\n", 
    "       and the while loop just bumps down the index if correct spot is\n", 
    "       take */\n", 
    "    while (array[index] != NULL)\n", 
    "    {\n", 
    "        index++;\n", 
    "    }\n", 
    "    array[index] = malloc(sizeof(key));\n", 
    "    strncpy(array[index], key, 39);\n", 
    "\n", 
    "    return;\n", 
    "}\n", 
    "\n"
]
